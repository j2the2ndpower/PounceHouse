var static      = require('node-static');
var mongoose    = require('mongoose');
var User        = require('./assets/schema/User');
var Game        = require('./assets/schema/Game');
var fileServer  = new static.Server('./');

var app         = require('http').createServer(function handler (request, response) {
        fileServer.serve(request, response); // this will return the correct file
});

var io          = require('socket.io').listen(app);

app.listen(3000);

var connStr = "mongodb://localhost:27017/";
var gameSlotCount = {};
var gameWaiting = {};
var gameLoading = {};
var gameSlot = {};
var gamePoints = {};
var gameStuck = {};

mongoose.connect(connStr, function(err) {
    if (err) throw err;
    console.log("Successfully connected to MongoDB");
});

// Listen for incoming connections from clients
io.sockets.on('connection', function (socket) {
    socket.on('newUser', function (data) {
        console.log("new user request... " + data.username);
        if (!data.username || !data.password) {
            socket.emit("errorMsg", {
                name: "User Error",
                code: 50,
                err: 'Please enter a value for Username and Password.'
            });
            return;
        }

        if (data.password !== data.confirm) {
            socket.emit("errorMsg", {
                name: "User Error",
                code: 75,
                err: 'Passwords must match.'
            });
            return;
        }

        User.findOne({username: data.username}, function(err, user) {
            if (user) {
                socket.emit("errorMsg", {
                    name: 'User Error',
                    code: 100,
                    err: 'User already exists.'
                });
                return;
            }

            var newUser = new User(data);
            newUser.save(function(err) {
                if (err) {
                    socket.emit("errorMsg", err);
                } else {
                    socket.emit('userCreated', data);
                }
            });
        });
    });

    socket.on("joinRoom", function(room) {
        console.log("Joining room.. ");
        socket.room=room;
        socket.join(room);
        if (room.substr(0,2) == 'G:') {
            socket.emit("gameChat", {message: "You have joined the game!"});
        }
    });

    socket.on("leaveRoom", function(room) {
        console.log("Leaving room.. ");
        socket.room=undefined;
        socket.leave(room);
    });

    socket.on("loginUser", function(data) {
        console.log("User logging in... " + data.username);
        if (data.reconnect) {
            User.findOne({username: data.username, password: data.password}, function(err, user) {
                if (!err && user) {
                    data.password = user.password;
                    data.reconnected = true;
                    socket.emit("loginSuccess", data);
                }
            });
            return;
        }

        User.findOne({username: data.username}, function(err, user) {
            if (!user) {
                socket.emit("errorMsg", {
                    name: "User Error",
                    code: 200,
                    err: 'Invalid username / password'
                });
                return;
            }

            user.comparePassword(data.password, function(err, isMatch) {
                if (err) {
                    socket.emit("errorMsg", err);
                } else if (!isMatch) {
                    socket.emit("errorMsg", {
                        name: "User Error",
                        code: 300,
                        err: "Invalid username / password"
                    });
                } else {
                    data.password = user.password;
                    data.reconnected = false;
                    socket.emit("loginSuccess", data);
                }
            });
        });
    });

    sendGameList = function(broadcast) {
        Game.find({status: "Waiting for Players"}, function(err, data) {
            if (!err) {
                var gameList = [], game;
                for (game in data) {
                    gameList.push([data[game]._id, data[game].name, data[game].owner, data[game].players + '/' + data[game].maxPlayers, data[game].status, data[game].type]);
                }

                if (broadcast) {
                    io.sockets.in('lobby').emit('gameListUpdate', gameList);
                } else {
                    socket.emit('gameListUpdate', gameList);
                }
            }
        });
    };

    socket.on("createGame", function(data) {
        console.log("Creating new game...");
        data.owner = data.user;
        delete data.user;
        data.maxPlayers = data.players;
        data.players = 1;
        data.status = "Waiting for Players";
        data.playerList = [data.owner];

        var newGame = new Game(data);
        newGame.save(function(err) {
            if (err) {
                socket.emit("errorMsg", err);
            } else {
                socket.emit("joinedGame", this.emitted.complete[0]);
                socket.emit('gameInfo', this.emitted.complete[0]);
                sendGameList(true);
            }
        });
    });

    socket.on("joinGame", function(data) {
        if (!data.id) {
            socket.emit('errorMsg', {
                name: "Game Error",
                code: 100,
                err: 'Please select an active Game.'
            });
            return;
        }

        console.log("Join game request: " + data.user);
        Game.findOne({_id: data.id}, function(err, game) {
            if (err) {
                socket.emit('errorMsg', err);
            } else {
                if (game.playerList.indexOf(data.user) >= 0 ) {
                    //assume reconnecting...
                    socket.emit('joinedGame', game);
                    socket.emit('gameInfo', game);
                    socket.broadcast.to('G:'+data.id).emit('gameChat', {message: data.user+' has reconnected...'});
                    return;
                }
                if (game.players >= game.maxPlayers) {
                    socket.emit('errorMsg', {
                        name: "Game Error",
                        code: 100,
                        err: 'Game is full.'
                    });
                    return;
                } else {
                    socket.emit("joinedGame", game);
                    socket.broadcast.in('G:' + game._id).emit('gameChat', {message: data.user + ' has joined the game!'});
                    game.players++;
                    game.playerList.push(data.user);

                    //update the db
                    Game.update({_id: data.id}, {players: game.players, playerList: game.playerList}, {}, function(err) {
                        if (err) { console.dir(err); }
                    });

                    //update the users
                    socket.emit('gameInfo', game);
                    io.sockets.in('G:'+data.id).emit('gameInfo', game);

                    sendGameList(true);
                }
            }
        });
    });

    socket.on('leaveGame', function(data) {
        Game.findOne({_id: data.id}, function(err, game) {
            if (!err) {
                console.log("User (" + data.user + ") left game: " + game._id);
                var i = game.playerList.indexOf(data.user);
                if (i >= 0) {
                    game.playerList.splice(i, 1);
                }
                game.players--;

                if (game.players === 0) {
                    console.log("Removing game: " + game._id);
                    Game.findOne({_id: data.id}).remove(function(err) {
                        if (err) { console.dir(err); }
                    });
                } else {
                    console.log("Updating game...");
                    Game.update({_id: data.id}, {players: game.players, playerList: game.playerList}, {}, function(err) {
                        if (err) { console.dir(err); }
                    });
                }
                io.sockets.in('G:'+data.id).emit('gameChat', {message: data.user + ' has left the game!'}); 
                io.sockets.in('G:'+data.id).emit('gameInfo', game);
                sendGameList(true);
            }
        });
    });

    var onStartGame = function(data) {
        gameSlotCount[data.game] = 0;
        gameWaiting[data.game] = undefined;
        gameLoading[data.game] = undefined;
        gameSlot[data.game] = {};
        gamePoints[data.game] = {};
        gameStuck[data.game] = [];
        Game.findOne({_id: data.game}, function(err, game) {
            if (!err && game) {
                io.sockets.in('G:'+data.game).emit('startGame', game);
            }
        });
    };

    socket.on("startGame", function(data) {
        console.log("Starting game: " + data.id);
        onStartGame({game: data.id});
    });

    var newSlot = function(gameId, card) {
        gameSlotCount[gameId] = gameSlotCount[gameId] || 0;
        var slotId = gameId + ':' + gameSlotCount[gameId]++;
        gameSlot[slotId] = [card];
        return slotId;
    };

    socket.on("moveCard", function(data) {
        socket.broadcast.to('G:'+data.game).emit('cardMoved', data);
    });

    socket.on("dropCard", function(data) {
        var m, cardNum, cardSuit, targetNum, targetSuit;
        m = data.source.split(':');
        cardNum = m[0];
        cardSuit = m[1];

        if (data.target !== 'invalid') {
            m = data.target.split(':');
            targetNum = m[0];
            targetSuit = m[1];
        }

        data.valid = false;

        gamePoints[data.game] = gamePoints[data.game] || {}; //init gamePoints for this game if needed
        gamePoints[data.game][data.user] = gamePoints[data.game][data.user] || {points: 0, pounce: 0, goalLeft: 13}; //init user info

        if (data.type && data.type == 'table' && !data.child) {
            if (cardNum == 1 && data.target == 'table') {
                data.sid = newSlot(data.game, data.source);
                data.valid = true;
            } else if (parseInt(cardNum,0)-1==targetNum && cardSuit == targetSuit) {
                data.valid = true;
            }

            //keep score
            if (data.valid) {
                gamePoints[data.game][data.user].points++;
            }
        } else if (data.type && data.type.substr(0,4) == 'slot') {
            if (data.target.substr(0,4) == 'slot') {
                data.valid = true;
            } else if (parseInt(cardNum, 0)+1 == targetNum) {
                var checkSuit = [];
                checkSuit.push(cardSuit == 'D' || cardSuit == 'H' ? 'R': 'B');
                checkSuit.push(targetSuit == 'D' || targetSuit == 'H' ? 'R': 'B');
                if (checkSuit.indexOf('B') >= 0 && checkSuit.indexOf('R') >= 0) {
                    data.valid = true;
                }
            }
        }

        if (data.valid && data.sid) {
            gameSlot[data.sid] = gameSlot[data.sid] || [];
            gameSlot[data.sid].push(data.source);
        }

        if (data.valid && data.sourceType.substr(0,4) === 'goal') {
            gamePoints[data.game][data.user].goalLeft--;
        }

        console.log("User (" + data.user + ") played " + data.source + " on " + data.target + "[valid: " + data.valid + "]");

        socket.emit("cardPlayed", data);
        if (data.type == 'table') {
            socket.broadcast.to('G:'+data.game).emit('cardPlayedOther', data);
        }
        return;
    });

    socket.on("gameListUpdate", function() {
        console.log("game list requested");
        sendGameList(false);
    });

    socket.on("gameChat", function(data) {
        console.log("game chat: " + data.user + "> " + data.message);
        io.sockets.in(socket.room).emit('gameChat', data);
    });

    socket.on("playerStuck", function(data) {
        console.log("player stuck..");
        Game.findOne({_id: data.game}, function(err, game) {
            if (!err && game) {
                gameStuck[data.game] = gameStuck[data.game] || [];
                if (gameStuck[data.game].indexOf(data.user) < 0) {
                    gameStuck[data.game].push(data.user);
                }
                data.players = gameStuck[data.game].length;
                data.maxPlayers = game.maxPlayers;
                io.sockets.in('G:'+data.game).emit('playerStuck', data);

                if (data.players >= data.maxPlayers) {
                    delete gameStuck[data.game];
                }
            }
        });
    });

    socket.on("cancelStuck", function(data) {
        console.log("cancel stuck... " + data.user);
        if (gameStuck[data.game]) {
            gameStuck[data.game].splice(gameStuck[data.game].indexOf(data.user), 1);

            Game.findOne({_id: data.game}, function(err, game) {
                if (!err && game) {
                    data.players = gameStuck[data.game].length;
                    data.maxPlayers = game.maxPlayers;
                    io.sockets.in('G:'+data.game).emit('playerStuck', data);
                }
            });
        }
    });

    socket.on("gameWin", function(data) {
        console.log("User (" + data.user + ") won game: " + data.game);
        gamePoints[data.game][data.user].pounce++;
        data.score = gamePoints[data.game];
        io.sockets.in('G:'+data.game).emit('gameOver', data);
        console.log("Waiting for users to be ready for next round...");
    });

    socket.on("gameLoaded", function(data) {
        console.log('User (' + data.user + ') is loaded.');
        if (gameLoading[data.game] === undefined) {
            Game.findOne({_id: data.game}, function(err, game) {
                if (!err && game) {
                    gameLoading[data.game] = parseInt(game.maxPlayers,0);
                } else {
                    gameLoading[data.game] = 0;
                }

                if (--gameLoading[data.game]===0) {
                    io.sockets.in('G:'+data.game).emit('gameReady', {});
                    console.log("Ready Go!");
                }
            });
        } else {
            if (--gameLoading[data.game]===0) {
                io.sockets.in('G:'+data.game).emit('gameReady', {});
                console.log("Ready Go!");
            }
        }
    });

    socket.on("gameContinue", function(data) {
        console.log('User (' + data.user + ') is ready.');
        if (gameWaiting[data.game] === undefined) {
            Game.findOne({_id: data.game}, function(err, game) {
                if (!err && game) {
                    gameWaiting[data.game] = parseInt(game.maxPlayers,0)-1;
                } else {
                    gameWaiting[data.game] = 0;
                }
            });
        } else {
            if (--gameWaiting[data.game]===0) {
                onStartGame(data);
                console.log("Starting next round!");
            }
        }
    });
});

console.log('Server running at http://127.0.0.1:3000/');
